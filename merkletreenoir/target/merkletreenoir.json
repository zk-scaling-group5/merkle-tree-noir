{
    "noir_version": "0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab",
    "hash": 5003030645518698186,
    "abi": {
        "parameters": [
            {
                "name": "leaf_index1",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "leaf_index2",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "old_leaf1",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "new_leaf1",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "old_leaf2",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "new_leaf2",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "old_path1",
                "type": {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "new_path1",
                "type": {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "old_path2",
                "type": {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "new_path2",
                "type": {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "old_root",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "intermediate_root",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "new_root",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            }
        ],
        "return_type": null,
        "error_types": {}
    },
    "bytecode": "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",
    "debug_symbols": "5Z3dbuIwEIXfJde98Iztsd1XWa0q+iskBFVLV1pVffeFLqEspBOtgiUz56ZqinPwwfPzyQ3Je3f/cPv2dDNfPq5eu+sf791idTdbz1fLzdF75z7/9Po8W26PXtezl3V3TRTSVfewvN/8yhQ+rrrH+eKhu07u4+pkcKS8Gxv911BfPn5edVRVnauq+6rqoap6rKouVdXTZPXseDc2R3+ofjqUQi69buS0H8xDg9lx3A1mF1kf7Nn73WDPSQ4Hb0xmIyZ9oN6kL/7IZEEwSQ7CJUG4ZITaQx5iLQOEy9iuSx96YfaFjycuEKlmBWb0IISgGYLAGYbAGbaCM2r1YSs4o68lBM5wuNBGzw0TyhlTzQrO6EEIgTMMgTMMgTPeCs6o1cdD7M54CJzxDeOM2uh9gEg1KzijByEEzngInPEQOOOt4IxafQLE7kyAwJnQMM6ojT4MEwqX/cS9TLkyItSVj3Xlpa58qiuf68qXqvLRTZa/gB4QyYhLtTpGhnDpIVwGCJcRovoIxFomCJe5XZcqgcaCkGpiBWfUIBQInBEInBEInJEAUX2s4Iy+lhA4Iw3jjNropWFCOWOqWcEZNQgTBM4kCJxJEDiTrOCMWn1SgFhLCJxJDeOM2uiTlQ0XPdWs4IwehBA4kyFwJkPgTLaCM/p3ziF2Z3KAcNkwzqiNPg8TSojy9QZen7h2CUBOdeVzXflSVb64uvJUV57ryvvJ8hfQA0ow4lK/8UiEcCkQLhOEywxRfQrCWpJzGDapXZv6vUccI2QbOStIMxKHAcMmBNSQg6AaclawZqQEWeGakdXEABtqGGz0jk8Ns8oZ042sgM1IHGKADWGADWGADVkBm5ESBLFfQ4QBNtQw2Ogdn61swujpxlbAZuTGzBhgwxhgwxhgw1bAZqQEYezYMAbYcMNgM9Lxh1lFXP9Pf5IU9Zmrz7L55l6C59OnyvpcWd9X1g+V9WNlfZmsfxFPl0hGbOp18pvbqpmzWSBsBodhkyBKUGCM1fQYNkO7NnUiDREj3ayAzUgcYoBNwACbgAE20QrY6CUoWgGbkdXEAJvYMNjoHT82zCrnTDcrYDMShxhgEzHAJmKATbQCNnoJEowdG8EAG2kYbEaeY2tlE2Yk3QJGHGKAjWCAjWCAjVgBm5EShLFjkzDAJjUMNnrH/+bmh0l6u5QyH87886RhTEhlf1lNpnRy0nDTLdxPj4q4k5MGWxi7/XOF2Mm/77Q5uH2ZLxbzp5vF6m62nq+Wr9tT3fbH8FdKStrP27mvKXAc+DhF+o9eUjocup2tr6oeJquXPhzTwcOYdupxunq/JonzsbpUVU9T1VMMvbrwsXquql4mq5c+VbM7jpnh68b/T9316kzH6jRVPft+VfPJJ8N8RvWjbPrYHP2avcxnt4uHbXXYvvi2vOuLxeZw/fv57yubwX8A",
    "file_map": {
        "25": {
            "source": "use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
            "path": "std/field/bn254.nr"
        },
        "29": {
            "source": "pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
            "path": "std/hash/mod.nr"
        },
        "39": {
            "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let index_bits: [u1; N] = index.to_le_bits();\n    let mut current = leaf;\n    for i in 0..N {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n",
            "path": "std/merkle.nr"
        },
        "70": {
            "source": "// Import the Merkle root calculation function\nuse dep::std;\n\nglobal MERKLE_DEPTH = 4;\n\n// The main function of the Noir program\n#[recursive]\nfn main(\n    leaf_index1: Field, // Index of the leaf being updated\n    leaf_index2: Field, // Index of the leaf being updated\n    old_leaf1: Field, // Old leaf value before update\n    new_leaf1: Field, // New leaf value after update\n    old_leaf2: Field, // Old leaf value before update\n    new_leaf2: Field, // New leaf value after update\n    old_path1: [Field; MERKLE_DEPTH], // Sibling nodes along the Merkle path for the first leaf\n    new_path1: [Field; MERKLE_DEPTH], // Sibling nodes along the Merkle path for the first leaf\n    old_path2: [Field; MERKLE_DEPTH], // Sibling nodes along the Merkle path for the second leaf\n    new_path2: [Field; MERKLE_DEPTH], // Sibling nodes along the Merkle path for the second leaf\n    old_root: pub Field, // Old Merkle root (public input)\n    intermediate_root: pub Field, // Intermediate Merkle root (public input)\n    new_root: pub Field, // New Merkle root (public input)\n) {\n    // Sender's leaf belongs to the tree with the old root\n    let old_hash1 = std::merkle::compute_merkle_root(old_leaf1, leaf_index1, old_path1);\n    // Receiver's leaf belongs to the tree with the old root\n    let old_hash2 = std::merkle::compute_merkle_root(old_leaf2, leaf_index2, old_path2);\n\n    // Compute the new root after updating the sender's leaf\n    let intermediate_hash = std::merkle::compute_merkle_root(new_leaf1, leaf_index1, new_path1);\n\n    // Compute the new root after updating the receiver's leaf\n    let new_hash = std::merkle::compute_merkle_root(new_leaf2, leaf_index2, new_path2);\n\n    // Enforce that the computed old roots match the provided old roots\n    assert(old_hash1 == old_root);\n    assert(old_hash2 == old_root);\n\n    // Enforce that the computed intermediate root matches the provided intermediate root\n    assert(intermediate_hash == intermediate_root);\n\n    // Enforce that the computed new root matches the provided new root\n    assert(new_hash == new_root);\n}\n",
            "path": "/home/vedant_asati_/zkbootcamp/merkle-tree-noir/merkletreenoir/src/main.nr"
        }
    },
    "names": [
        "main"
    ],
    "brillig_names": [
        "decompose_hint"
    ]
}